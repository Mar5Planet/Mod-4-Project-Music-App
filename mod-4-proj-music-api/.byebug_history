exit
@playlist_track = PlaylistTrack.create(playlist_id: playlist_track_params[:playlist_id], track_id: track.id)
track.id
playlist_track_params[:playlist_id]
playlist_track_params
track
playlist_track_params
track = Track.create_from_spotify_track(s_track)
s_track = RSpotify::Track.find(params[:spotify_id])
stack = _
RSpotify::Track.find(params[:spotify_id])
exit
track
exit
track
exit
track
exit
track
exit
quit
params
quit
params
exit
params
quit
params[:spotify_id]
params.keys
params[:spotify_track_id]
Track.find_by(spotify_id: params[:spotify_track_id])
quit
params[:spotify_track_id]
      spotify_id: track.id
      user_id: params[:user_id],
      name: params[:name],
Playlist.create(
      track_id: track.id
      user_id: params[:user_id],
      name: params[:name],
Playlist.create(
params[:spotify_track_id]
Track.find_by(spotify_id: params[:spotify_track_id])
exit
request
request.authorization
request.headers['Authorization']
decoded_token
!!current_user
exit
params
quit
@user = User.create(user_params)
params.keys
quit
params.keys
quit
s_track.id
exit
@tracks
exit
    end
      )
        preview: s_track.preview_url
        popularity: s_track.popularity,
        duration: s_track.duration_ms,
        image: s_track.image,
        artists: s_track.artists,
        name: s_track.name,
      Track.new(
@tracks = s_tracks.map do |s_track|
    end
      Track.new(name: s_track.name, artists: s_track.artists, image: s_track.image, duration: s_track.duration_ms, popularity: s_track.popularity, preview: s_track.preview_url)
@tracks = s_tracks.map do |s_track|
s_tracks = RSpotify::Track.search(params[:q])
RSpotify::Track.search(params[:q])
